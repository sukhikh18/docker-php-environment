version: '3'

services:
    db:
        container_name: ${DOCKER_NAME}_db
        build: ./docker/db/${DB_VERSION}
        command: --default-authentication-plugin=mysql_native_password
        restart: unless-stopped
        volumes:
            - ${DB_PATH}:/var/lib/${DB_CONNECTION}
            # - ./logs/db:/var/log/mysql:ro
            - ./backup:/var/www/app/backup
        ports:
            - ${DB_PORT}:3306
        environment:
            MYSQL_DATABASE: ${DB_DATABASE}
            MYSQL_USER: ${DB_USERNAME}
            MYSQL_PASSWORD: ${DB_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
            TZ: ${DOCKER_TIMEZONE}
        networks:
            - default

    php:
        container_name: ${DOCKER_NAME}_php
        build:
            context: ./docker/php/${PHP_VERSION}
            args:
                DOCKER_PHP_VERSION: ${PHP_VERSION}
                TZ: ${DOCKER_TIMEZONE}
        volumes:
            - ./:/var/www
            - ./docker/php/8.4/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf
            # - ./logs/php:/var/log/php:ro
            # Use for debug config:
            # - ./docker/php/conf.d:/etc/php/7.4/fpm/conf.d
        ports:
            - 9001:9001 # Supervisor UI
        environment:
            PHP_IDE_CONFIG: "serverName=Docker"
        links:
            - db
        extra_hosts:
            - ${APP_DOMAIN}:${NETWORK_INTERFACE}
            - host.docker.internal:host-gateway
        networks:
            - default

    web:
        build: ./docker/${WEB_SERVER}
        container_name: ${DOCKER_NAME}_web
        volumes:
            - ./:/var/www:ro
            # For debug config:
            - ./docker/nginx/conf.d:/etc/nginx/conf.d
            # - ./logs/nginx:/var/log/nginx:ro
        ports:
            - ${WEB_PORT}:80
        links:
            - php
        environment:
            APP_DOMAIN: ${APP_DOMAIN}
            TZ: ${DOCKER_TIMEZONE}
        networks:
            default:
                ipv4_address: ${NETWORK_INTERFACE}

    mailhog:
        image: mailhog/mailhog
        container_name: ${DOCKER_NAME}_mailhog
        ports:
            - 1025:1025
            - 8025:8025
        networks:
            - default

networks:
    default:
        ipam:
            config:
                - subnet: ${NETWORK_SUBNET}

# Use a restart policy by restart
# `no`                          Don't automatically restart the container. (Default)
# `on-failure[:max-retries]`    Restart the container if it exits due to an error, which manifests as a non-zero exit code. Optionally, limit the number of times the Docker daemon attempts to restart the container using the :max-retries option. The on-failure policy only prompts a restart if the container exits with a failure. It doesn't restart the container if the daemon restarts.
# `always`                      Always restart the container if it stops. If it's manually stopped, it's restarted only when Docker daemon restarts or the container itself is manually restarted. (See the second bullet listed in restart policy details)
# `unless-stopped`              Similar to always, except that when the container is stopped (manually or otherwise), it isn't restarted even after Docker daemon restarts.
